<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API-MUSIC</name>
    </assembly>
    <members>
        <member name="M:API_MUSIC.Controllers.AddressController.CadastrarAddress(API_MUSIC.Data.Dtos.CreateAndressDto)">
            <summary>
            Cadastra um novo endereço.
            </summary>
            <param name="addressDto">Dados do endereço a ser cadastrado.</param>
            <returns>Retorna um objeto JSON representando o endereço recém-cadastrado.</returns>
        </member>
        <member name="M:API_MUSIC.Controllers.AddressController.ViewAdress(System.String)">
            <summary>
            Visualiza os detalhes de um endereço com base no CEP.
            </summary>
            <param name="cep">CEP do endereço a ser visualizado.</param>
            <returns>Retorna um objeto JSON representando os detalhes do endereço.</returns>
        </member>
        <member name="M:API_MUSIC.Controllers.AddressController.DeleteAddress(System.String)">
            <summary>
            Remove um endereço com base no CEP.
            </summary>
            <param name="cep">CEP do endereço a ser removido.</param>
            <returns>Retorna uma resposta sem conteúdo (204 No Content).</returns>
        </member>
        <member name="M:API_MUSIC.Controllers.AddressController.AlterarAllDate(System.String,API_MUSIC.Data.Dtos.UpdateAddressDto)">
            <summary>
            Atualiza todos os dados de um endereço com base no CEP.
            </summary>
            <param name="cep">CEP do endereço a ser atualizado.</param>
            <param name="updateAddressDto">Dados atualizados do endereço.</param>
            <returns>Retorna uma resposta sem conteúdo (204 No Content).</returns>
        </member>
        <member name="M:API_MUSIC.Controllers.ArtistController.CadadastrarArtista(API_MUSIC.Data.Dtos.CreateArtistDto)">
            <summary>
            Adciona um artista ao banco de dados 
            </summary>
            <param name="artistDto"> Objeto com os campos necessários para criação de um filme </param>
            <returns>IActionResult </returns>
            <response code="201"> Caso a inserção seja feita com sucessp </response>
        </member>
        <member name="M:API_MUSIC.Controllers.ArtistController.VisualizarArtistaPeloNome(System.String)">
            <summary>
            Retorna a visualização do artista 
            </summary>
            <param string="name"> Obrigatorio informar o nome do artista </param>
            <returns>IActionResult </returns>
            <response code="200"> Sucesso </response>
        </member>
        <member name="M:API_MUSIC.Controllers.ArtistController.AlterarAlgunsDadosDoArtista(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{API_MUSIC.Data.Dtos.UpdateArtistDto})">
            <summary>
            Alterar somente alguns dados do artista
            </summary>
            <param name="name"> Obrigatorio informar o nome do artista que deseja alterar dados</param>
            <param name="patch"> Os seguintes dados que deseja alterar </param>
            <returns>IActionResult </returns>
            <response code="204"> Dados Alterados Com Sucesso</response>
        </member>
        <member name="M:API_MUSIC.Controllers.ArtistController.AlterarTodosDadosDoArtist(System.String,API_MUSIC.Data.Dtos.UpdateArtistDto)">
            <summary>
            Alterar todos dados do Artista
            </summary>
            <param name="name"> Obrigatorio informar o nome do artista para fazer alteração</param>
            <param name="artistDto"> Dados que serão utilizados para fazer alteração</param>
            <returns> IActionResult</returns>
            <response code="204"> Dados Alterados Com Sucesso</response>
        </member>
        <member name="M:API_MUSIC.Controllers.ArtistController.ExcluirArtista(System.String)">
            <summary>
            Excluir artista do banco de dados
            </summary>
            <param name="name"> Obrigatorio informar o nome do artista para fazer exclusão</param>
            <returns> IActionResult</returns>
            <response code="204"> Dados Excluidos Com Sucesso</response>
        </member>
        <member name="M:API_MUSIC.Controllers.MusicController.CadastrarMusica(API_MUSIC.Data.Dtos.CreateMusicDto)">
            <summary>
            Cadastra uma musica no banco de dados
            </summary>
            <param name="music"> Obrigatorio preenchemento dos campos</param>
            <returns> IActionResult</returns>
            <response code="201"> Musica cadastrada </response> 
        </member>
        <member name="M:API_MUSIC.Controllers.MusicController.VisualizarMusicaPeloTitulo(System.String)">
            <summary>
            Visualizar a musica cadastrada
            </summary>
            <param name="title"> Obrigatorio Informar o nome da musica</param>
            <returns> IActionResult</returns>
            <response code="200"> Sucesso </response>>
        </member>
        <member name="M:API_MUSIC.Controllers.MusicController.ListaDeMusic(System.Int32,System.Int32)">
            <summary>
            Visualizar lista de musica
            </summary>
            <param name="skip"> Obrigatorio informar o número de página que deseja pular</param>
            <param name="take"> Obrigatorio informar o número de página que deseja selecionar</param>
            <returns>IActionResult</returns>
            <response code="200"> Sucesso </response>>
        </member>
        <member name="M:API_MUSIC.Controllers.MusicController.AlterarDados(System.String,API_MUSIC.Data.Dtos.UpdateMusicDto)">
            <summary>
            Alterar todos dados da musica
            </summary>
            <param name="title"> Obrigatorio informar o nome da musica</param>
            <param name="musicaDto">Preenchimento de todos campos obrigatorios</param>
            <returns>IActionResult</returns>
            <response code="204"> Todos dados alterados com sucesso </response>
        </member>
        <member name="M:API_MUSIC.Controllers.MusicController.AlterandoAlgunsDadosArtist(System.String,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{API_MUSIC.Data.Dtos.UpdateMusicDto})">
            <summary>
            Alterar alguns dados da musica
            </summary>
            <param name="title"> Obrigatorio informar o nome da mmusica</param>
            <param name="path"> Obrigatorio informar quais dados devem ser alterado</param>
            <returns>IActionResult</returns>
            <response code="204"> Dados alterados com sucesso </response>
        </member>
        <member name="M:API_MUSIC.Controllers.MusicController.ExcluirMusica(System.String)">
            <summary>
            Exluir musica da base de dados
            </summary>
            <param name="title"> Obrigatorio informar o nome da musica</param>
            <returns>IActionResult</returns>
            <response code="204"> Musica excluída com sucesso </response>
        </member>
        <member name="M:API_MUSIC.Controllers.UserController.Cadastrar(API_MUSIC.Data.Dtos.CreateUserDto)">
            <summary>
            Controller que realiza o cadastramento do usuário
            </summary>
            <param name="createUserDto"> Dados necessários para realizar criação do usuário</param>
            <returns> usuário cadastrado </returns>
        </member>
        <member name="M:API_MUSIC.Controllers.UserController.Login(API_MUSIC.Data.Dtos.LoginUsersDto)">
            <summary>
            Método que realiza o login do usuário
            </summary>
            <param name="loginUsersDto"> Dados necessários para realizar o login do usuário </param>
            <returns></returns>
        </member>
        <member name="P:API_MUSIC.Data.Dtos.CreateAndressDto.Artist">
            Criando relacionamento [:1]
        </member>
        <member name="T:API_MUSIC.Data.EfCore.ArtistDaoComEfCore">
            <summary>
            Classe que implementa a interface IArtistDao para acessar e maipular artisttas usando Entity Framework.
            </summary>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.ArtistDaoComEfCore.#ctor(API_MUSIC.Data.UsersDbContext)">
            <summary>
            Contrustor que recebe um contexto de banco de dados IMusicContext para ser usado para operações de banco de dados.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.ArtistDaoComEfCore.ConsultarArtistaPeloNome1(System.String)">
            <summary>
            Consulta artista pelo name do banco de dados
            </summary>
            <param name="name"> o nome do artista a ser consultado</param>
            <returns> O artista encontrado ou null se não encontrado</returns>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.ArtistDaoComEfCore.CadastrarNoBanco(API_MUSIC.Models.Artist)">
            <summary>
            Adiciona um novo artista ao banco de dados
            </summary>
            <param name="Artist"> O artista a ser cadastrado</param>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.ArtistDaoComEfCore.RemoveNoBanco(API_MUSIC.Models.Artist,System.String)">
            <summary>
            Remover o artista ao banco de dados
            </summary>
            <param name="artist"> O artista a ser removido</param>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.ArtistDaoComEfCore.SalvaAlteracoesFeitas">
            <summary>
            Salva as alterações feitas no banco
            </summary>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.MusicDaoComEfCore.#ctor(API_MUSIC.Data.UsersDbContext)">
            <summary>
            Construtor que recebe um contexto de banco de dados IMusicContext para ser usado para operações de banco de dados.
            </summary>
            <param name="context">O contexto do banco de dados.</param>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.MusicDaoComEfCore.BuscarListaDeMusicas(System.Int32,System.Int32)">
            <summary>
            Busca uma lista de músicas com paginação.
            </summary>
            <param name="skip">O número de registros a serem ignorados.</param>
            <param name="take">O número de registros a serem retornados.</param>
            <returns>Uma coleção de músicas.</returns>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.MusicDaoComEfCore.ProcurarMusciaPeloTitle1(System.String)">
            <summary>
            Procura uma música pelo título no banco de dados.
            </summary>
            <param name="title">O título da música a ser procurada.</param>
            <returns>A música encontrada ou null se não encontrada.</returns>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.MusicDaoComEfCore.CadastrarMusicaNoBanco(API_MUSIC.Models.Music)">
            <summary>
            Cadastra uma nova música no banco de dados.
            </summary>
            <param name="music">A música a ser cadastrada.</param>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.MusicDaoComEfCore.SalvarAlteracoes">
            <summary>
            Salva todas as alterações feitas no contexto do banco de dados.
            </summary>
        </member>
        <member name="M:API_MUSIC.Data.EfCore.MusicDaoComEfCore.RemoverMusic(API_MUSIC.Models.Music,System.String)">
            <summary>
            Remove uma música do banco de dados.
            </summary>
            <param name="music">A música a ser removida.</param>
        </member>
        <member name="P:API_MUSIC.Models.Address.Artist">
            Criando relacionamento [:1]
        </member>
        <member name="P:API_MUSIC.Models.Artist.AddressID">
            Relação [n] (relacionamento de entidade)
        </member>
        <member name="M:API_MUSIC.Services.Handlers.TokenService.GenerateToken(API_MUSIC.Models.User)">
            <summary>
            Método que realiza a criaçãod o token
            </summary>
            <param name="user"> dados necessários para criação</param>
            <returns> retornar o token (cripitografado) do usuário </returns>
        </member>
        <member name="M:API_MUSIC.Services.Handlers.TokenService.TokenDecodeIdUser(System.String)">
            <summary>
            Método que descripitografa o token do usuário
            </summary>
            <param name="token"> passa o dado JWT token Bearer</param>
            <returns> retorna a id do claim do token </returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:API_MUSIC.Services.UsuarioService.QueryUser(System.String)">
            <summary>
            Método que consulta o id do usuário
            </summary>
            <param name="id"> Campo necessário para consultar</param>
            <returns> retorna o id do usuário</returns>
        </member>
    </members>
</doc>
